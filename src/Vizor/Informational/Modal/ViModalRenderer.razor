@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor
@inject ViModalService ModalService

@ModalFragment

@if (ModalId != null)
{
	<a @key="@ModalId" id="@(ModalId + "-toggle")" class="invisible" data-bs-toggle="modal" data-bs-target="@("#" + ModalId)" aria-hidden="true" />
}

@code {

	[Parameter]
	public RenderFragment? ModalFragment { get; set; }

	[Parameter]
	public string? ModalId { get; set; }

	[Inject]
	public IJSRuntime JSRuntime { get; set; } = default!;

	protected override void OnInitialized()
	{
		ModalService.SetRenderer(this);
	}

	internal async Task UpdateAsync(RenderFragment? fragment, string? id)
	{
		ModalFragment = fragment;
		ModalId = id;

		await InvokeAsync(StateHasChanged);
	}

	internal ValueTask ToggleModalAsync(string id) => JSRuntime.InvokeVoidAsync("viToggleModal", id + "-toggle");

	internal ValueTask CloseModalAsync(string id) => JSRuntime.InvokeVoidAsync("viToggleModal", id + "-close");
}
