@using System.Reflection;

@code {

	private ViModalRenderer? renderer;
	private TaskCompletionSource<ViModalBase>? modalRendered;

	private ViModalBase? modal;

	public async Task<ModalResult> Show<TModal>() where TModal : ViModalBase
	{
		var id = RazorExtensions.RandomId();
		RenderFragment? fragment = builder =>
		{
			builder.OpenComponent<TModal>(0);
			builder.AddAttribute(1, "Id", id);
			builder.CloseComponent();
		};

		return await ShowInternal(fragment, id);
	}

	public async Task<ModalResult> ShowSuccess(string message, string? description, string submitText = "Ok", string cancelText = "Close")
	{
		var id = RazorExtensions.RandomId();
		RenderFragment fragment = @<ViStatusModal Id="@id" Style="ModalStyle.Success" Message="@message" Description="@description"
											CancelContent="@TextToFragment(cancelText)" SubmitContent="@TextToFragment(submitText)" />;

		return await ShowInternal(fragment, id);
	}

	public async Task<ModalResult> ShowWarning(string message, string? description, string submitText = "Ok", string cancelText = "Close")
	{
		var id = RazorExtensions.RandomId();
		RenderFragment fragment = @<ViStatusModal Id="@id" Style="ModalStyle.Warning" Message="@message" Description="@description"
											CancelContent="@TextToFragment(cancelText)" SubmitContent="@TextToFragment(submitText)" />;

		return await ShowInternal(fragment, id);
	}

	public async Task<ModalResult> ShowDanger(string message, string? description, string submitText = "Ok", string cancelText = "Close")
	{
		var id = RazorExtensions.RandomId();
		RenderFragment fragment = @<ViStatusModal Id="@id" Style="ModalStyle.Danger" Message="@message" Description="@description"
											CancelContent="@TextToFragment(cancelText)" SubmitContent="@TextToFragment(submitText)" />;

		return await ShowInternal(fragment, id);
	}

	public async Task<ModalResult> ShowInfo(string message, string? description, string submitText = "Ok", string cancelText = "Close")
	{
		var id = RazorExtensions.RandomId();
		RenderFragment fragment = @<ViStatusModal Id="@id" Style="ModalStyle.Info" Message="@message" Description="@description"
											CancelContent="@TextToFragment(cancelText)" SubmitContent="@TextToFragment(submitText)" />;

		return await ShowInternal(fragment, id);
	}

	internal void SetRenderer(ViModalRenderer? renderer)
	{
		this.renderer = renderer;
	}

	private RenderFragment TextToFragment(string text)
	{
		return @<text>@text</text>;
	}

	private async Task<ModalResult> ShowInternal(RenderFragment? fragment, string id)
	{
		if (renderer == null)
		{
			throw new InvalidOperationException($"{typeof(ViModalRenderer)} was not initialized in the current layout");
		}
		if (modal != null)
		{
			throw new InvalidOperationException("Only 1 modal can be active at any given time");
		}

		modalRendered = new TaskCompletionSource<ViModalBase>();

		modal = null;
		await renderer.UpdateAsync(fragment, id);

		modal = await modalRendered.Task;
		await renderer.ToggleModalAsync(id);

		var result = await modal.Show();

		await renderer.CloseModalAsync(id);

		modal = null;
		await renderer.UpdateAsync(null, null);

		return result;
	}

	internal void SetModalRendered(ViModalBase modal)
	{
		this.modal = modal;

		//TODO: sanity checks
		modalRendered?.TrySetResult(modal);
	}
}