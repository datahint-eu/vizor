@inherits ViComponentBase

<div class="modal modal-blur fade" id="@Modal.Id" tabindex="-1" style="display: none;" aria-hidden="true" @attributes="@AdditionalAttributes">
	<div class="modal-dialog modal-dialog-centered @ToModalSize(Size) @(IsScrollable ? "modal-dialog-scrollable" : "")" role="document">
		<div class="modal-content">
			<a id="@(Modal.Id + "-close")" class="invisible" data-bs-dismiss="modal" aria-hidden="true" />

			@if (Header != null || HeaderText != null)
			{
				<div class="modal-header @HeaderCssClass">
					<h5 class="modal-title">
						@Header
						@HeaderText
					</h5>
					@if (ShowCloseButton)
					{
						<button type="button" class="btn-close" @onclick="(() => Modal.Close())"></button>
					}
				</div>
			}
			else if (ShowCloseButton)
			{
				<button type="button" class="btn-close" @onclick="(() => Modal.Close())"></button>
			}

			@if (Style != ModalStyle.Info)
			{
				<div class="modal-status @ToModalStyle(Style)"></div>
			}
			<div class="modal-body @BodyCssClass">
				@Body
			</div>
			@if (Footer != null)
			{
				<div class="modal-footer @FooterCssClass">
					@Footer
				</div>
			}

		</div>
	</div>
</div>

@code {

	[Parameter, EditorRequired]
	public ViModalBase Modal { get; set; } = default!;

	[Parameter]
	public ModalSize Size { get; set; }

	[Parameter]
	public ModalStyle Style { get; set; }

	[Parameter]
	public string? HeaderText { get; set; }

	[Parameter]
	public RenderFragment? Header { get; set; }

	[Parameter]
	public string? HeaderCssClass { get; set; }

	[Parameter]
	public RenderFragment? Body { get; set; }

	[Parameter]
	public string? BodyCssClass { get; set; }

	[Parameter]
	public RenderFragment? Footer { get; set; }

	[Parameter]
	public string? FooterCssClass { get; set; }

	[Parameter]
	public bool ShowCloseButton { get; set; } = true;

	[Parameter]
	public bool IsScrollable { get; set; }

	public static string? ToModalSize(ModalSize size)
	{
		return size switch
		{
			ModalSize.FullWidth => "modal-full-width",
			ModalSize.Small => "modal-sm",
			ModalSize.Large => "modal-lg",
			_ => null
		};
	}

	public static string? ToModalStyle(ModalStyle style)
	{
		return style switch
		{
			ModalStyle.Success => "bg-success",
			ModalStyle.Warning => "bg-warning",
			ModalStyle.Danger => "bg-danger",
			_ => null
		};
	}
}
