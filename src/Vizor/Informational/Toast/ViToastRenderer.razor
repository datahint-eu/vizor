@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor
@inject ViToastService ToastService

<div aria-live="polite" aria-atomic="true" class="position-relative">
	<div class="toast-container @GetPlacement() p-3">
		@foreach (var toast in toasts)
		{
			@toast.Fragment
		}
	</div>
</div>

@code {

	private List<ToastWrapper> toasts = new();

	[Inject]
	public IJSRuntime JSRuntime { get; set; } = default!;

	[Parameter]
	public ToastPlacement Placement { get; set; } = ToastPlacement.TopRight;

	protected override void OnInitialized()
	{
		ToastService.SetRenderer(this);
	}

	internal async Task AddToastAsync(string id, RenderFragment toast, int delayMs)
	{
		//NOTE: the javascript call automatically hides the toast message after 'delayMs' ms
		// we could clean up the list of toasts with a JS callback (but that isn't failsafe)
		// we could also start a BG task or use a timer, but I think it's wastefull
		// so we simply clean it up on the next call
		var now = Environment.TickCount64;
		toasts.RemoveAll(t => (now - t.TickCount) >= 60000);

		// add a new toast & show
		toasts.Add(new ToastWrapper() { TickCount = now, Fragment = toast });
		await InvokeAsync(StateHasChanged);

		await JSRuntime.InvokeVoidAsync("viAutoHideToast", id, delayMs);
	}

	private string GetPlacement()
	{
		return Placement switch
		{
			ToastPlacement.BottomLeft => "bottom-0 start-0",
			ToastPlacement.BottomCenter => "bottom-0 start-50 translate-middle-x",
			ToastPlacement.BottomRight => "bottom-0 end-0",

			ToastPlacement.MiddleLeft => "top-50 start-0 translate-middle-y",
			ToastPlacement.MiddleCenter => "top-50 start-50 translate-middle",
			ToastPlacement.MiddleRight => "top-50 end-0 translate-middle-y",

			ToastPlacement.TopLeft => "top-0 start-0",
			ToastPlacement.TopCenter => "top-0 start-50 translate-middle-x",
			_ => "top-0 end-0",
		};
	}

	private struct ToastWrapper
	{
		public long TickCount;
		public RenderFragment Fragment;
	}
}
