@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor.Informational

@using System.Reflection;

@foreach (var prop in undocumentedProperties)
{
	<ViPropertyDocumentation PropertyName="@prop.Name">
		<Description>
			@{
				var desc = prop.GetDescription();
				if (desc == null)
				{
					<span class="text-danger">Not documented</span>
				}
				else
				{
					@desc
				}
			}
		</Description>
	</ViPropertyDocumentation>
}

@code {

	private List<PropertyInfo> undocumentedProperties = new();

	[CascadingParameter(Name = "ViClassDocumentation")]
	public ViClassDocumentation Parent { get; set; } = default!;

	protected override void OnInitialized()
	{
		if (Parent == null)
			throw new ArgumentException($"{nameof(ViMissingRazorPropertiesList)} must be a child of {nameof(ViClassDocumentation)}");

		var allProperties = Parent.Class.GetProperties();
		undocumentedProperties.AddRange(allProperties.Where(p =>
			p.HasAttribute<ParameterAttribute>()
			&& !Parent.documentedProperties.Contains(p.Name))
		);
	}
}
