@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor

@using System.Reflection;

@if (property != null)
{
	<tr>
		<td>@property.Name</td>
		<td>
			<code>@property.ToReadableTypeName()</code>
			@if (isRequired)
			{
				<sup class="ms-1"><b>required</b></sup>
			}
		</td>
		<td>@Description</td>
	</tr>
}

@code {

	private PropertyInfo? property;
	private bool isRequired;

	[Parameter, EditorRequired]
	public string PropertyName { get; set; } = default!;

	[Parameter]
	public RenderFragment? Description { get; set; } = default!;

	[CascadingParameter(Name = "ViClassDocumentation")]
	public ViClassDocumentation Parent { get; set; } = default!;

	protected override void OnInitialized()
	{
		if (Parent == null)
			throw new ArgumentException($"{nameof(ViPropertyDocumentation)} must be a child of {nameof(ViClassDocumentation)}");

		property = Parent.Class.GetProperty(PropertyName);

		if (property != null)
		{
			isRequired = property.HasAttribute<EditorRequiredAttribute>();

			if (Description == null)
			{
				Description = @<text>@property.GetDescription()</text>;
			}
		}

		Parent.documentedProperties.Add(PropertyName);
	}
}
