@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@inherits ViInputBase

<button class="btn @CssClass @ColorConverter.ToBtnColor(Color, Style) @ToButtonSize(Size)"
		type="@Type.ToButtonType()"
		@attributes="@AdditionalAttributes"
		@onclick="@HandleClick"
		disabled="@GetDisabledState().ToConditionalAttribute()">
	@if (isBusy && (Behavior & ButtonBehavior.ShowBusySpinner) == ButtonBehavior.ShowBusySpinner)
	{
		<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
	}
	else
	{
		@Icon
	}
	@ChildContent
	@Text
</button>

@code {

	// see https://getbootstrap.com/docs/5.2/components/buttons/

	//TODO: btn-block, href, prevent default,
	//TODO: alternative spinner states

	protected internal bool isBusy;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string? Text { get; set; }

	[Parameter]
	public RenderFragment? Icon { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> OnClick { get; set; }

	[Parameter]
	public bool OnClickPreventDefault { get; set; }

	[Parameter]
	public bool OnClickStopPropagation { get; set; }

	[Parameter]
	public ThemeColor? Color { get; set; }

	[Parameter]
	public ElementSize Size { get; set; } = ElementSize.Regular;

	[Parameter]
	public ButtonStyle Style { get; set; } = ButtonStyle.Regular;

	[Parameter]
	public ButtonType Type { get; set; } = ButtonType.Button;

	[Parameter]
	public ButtonBehavior Behavior { get; set; } = ButtonBehavior.PreventDoubleClick;

	public bool IsBusy => isBusy;

	protected bool GetDisabledState() => IsDisabled || (((Behavior & ButtonBehavior.PreventDoubleClick) == ButtonBehavior.PreventDoubleClick) && isBusy);

	public static string? ToButtonSize(ElementSize size)
	{
		return size switch
		{
			ElementSize.Small => "btn-sm",
			ElementSize.Large => "btn-lg",
			_ => null
		};
	}

	private async Task HandleClick(MouseEventArgs e)
	{
		if ((Behavior & ButtonBehavior.PreventDoubleClick) == ButtonBehavior.PreventDoubleClick)
		{
			if (isBusy)
				return;
		}

		try
		{
			isBusy = true;
			if (OnClick.HasDelegate)
			{
				await OnClick.InvokeAsync(e);
			}
		}
		finally
		{
			isBusy = false;
		}
	}
}
