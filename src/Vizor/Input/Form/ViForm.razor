@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor
@inherits ViComponentBase

@if (context != null)
{
	<form class="@CssClass" @attributes="@AdditionalAttributes" @onsubmit="OnSubmit">
		<CascadingValue IsFixed="true" Name="ViFormContext" Value="@context">
			<CascadingValue IsFixed="true" Name="ViFormStyle" Value="@Style">
				@ChildContent
			</CascadingValue>
		</CascadingValue>
	</form>
}

@code {

	private ViFormContext? context;

	[Parameter, EditorRequired]
	public object? Model { get; set; }

	[Parameter]
	public FormStyle Style { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment ChildContent { get; set; } = default!;

	[Parameter]
	public EventCallback<ViFormContext> OnValidSubmit { get; set; }

	[Parameter]
	public EventCallback<ViFormContext> OnInvalidSubmit { get; set; }

	protected override Task OnInitializedAsync()
	{
		context = new ViFormContext(Model);

		return Task.CompletedTask;
	}

	private async Task OnSubmit()
	{
		if (context == null)
			return;

		bool isValid = context.ValidateOnSubmit();

		if (isValid && OnValidSubmit.HasDelegate)
		{
			await OnValidSubmit.InvokeAsync(context);
		}

		if (!isValid && OnInvalidSubmit.HasDelegate)
		{
			await OnInvalidSubmit.InvokeAsync(context);
		}
	}
}
