@inherits ViInputBase<string>

@if (AllowToggleVisibility)
{
	<div class="input-group input-group-flat">
		<input type="@(IsPasswordVisible ? "text" : "password")" class="form-control @CssClass"
		   placeholder="@Placeholder" @attributes="@AdditionalAttributes"
		   disabled="@IsDisabled.ToConditionalAttribute()" readonly="@IsReadOnly.ToConditionalAttribute()"
		   @bind-value="@Value" @bind-value:event="oninput" />

		<span class="input-group-text">
			<a class="input-group-link" onclick="@(() => TogglePasswordVisibility)">
				@if (@IsPasswordVisible)
				{
					<!-- TODO: icon -->
				}
				else
				{
					<!-- TODO: icon -->
				}
			</a>
		</span>
	</div>
}
else
{
	<input type="text" class="form-control CssClass"
	   placeholder="Placeholder" @attributes="AdditionalAttributes"
	   disabled="IsDisabled.ToConditionalAttribute()" readonly="IsReadOnly.ToConditionalAttribute()"
	   @bind-value="Value" @bind-value:event="oninput" />
}

<!-- TODO: validation, after bind event, ... -->

@code {

	[Parameter]
	public bool AllowToggleVisibility { get; set; } = true;

	public bool IsPasswordVisible { get; protected set; }

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		result = value ?? string.Empty;
		validationErrorMessage = null;
		return true;
	}

	public async Task TogglePasswordVisibility()
	{
		if (!AllowToggleVisibility)
			return;

		IsPasswordVisible = !IsPasswordVisible;
		await InvokeAsync(StateHasChanged);
	}
}
