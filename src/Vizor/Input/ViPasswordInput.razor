@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@inherits ViInputBase<string>

@if (AllowToggleVisibility)
{
	<div class="row g-2">
		<div class="col">
				<input type="@(IsPasswordVisible ? "text" : "password")" class="form-control @CssClass @validationCssClass"
				   placeholder="@Placeholder" @attributes="@AdditionalAttributes"
				   disabled="@IsDisabled.ToConditionalAttribute()" readonly="@IsReadOnly.ToConditionalAttribute()"
				   aria-invalid="@isValid.ToConditionalAttributeInverse()"
				   @bind="@BindableStringValue" @bind:event="oninput" />
		</div>
		<div class="col-auto">
			<a class="btn btn-icon btn-ghost-primary" aria-label="Button" @onclick="TogglePasswordVisibility">
				@if (@IsPasswordVisible)
				{
					<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-eye-off" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
						<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
						<line x1="3" y1="3" x2="21" y2="21"></line>
						<path d="M10.584 10.587a2 2 0 0 0 2.828 2.83"></path>
						<path d="M9.363 5.365a9.466 9.466 0 0 1 2.637 -.365c4 0 7.333 2.333 10 7c-.778 1.361 -1.612 2.524 -2.503 3.488m-2.14 1.861c-1.631 1.1 -3.415 1.651 -5.357 1.651c-4 0 -7.333 -2.333 -10 -7c1.369 -2.395 2.913 -4.175 4.632 -5.341"></path>
					</svg>
				}
				else
				{
					<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-eye" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
						<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
						<circle cx="12" cy="12" r="2"></circle>
						<path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7"></path>
					</svg>
				}
			</a>
		</div>
	</div>
}
else
{
	<input type="text" class="form-control @CssClass @validationCssClass"
	   placeholder="Placeholder" @attributes="@AdditionalAttributes"
	   disabled="@IsDisabled.ToConditionalAttribute()" readonly="@IsReadOnly.ToConditionalAttribute()"
	   aria-invalid="@isValid.ToConditionalAttributeInverse()"
	   @bind="BindableStringValue" @bind:event="oninput" />
}
@RenderValidationMessages()

<!-- TODO: after bind event, ... -->
@code {

	[Parameter]
	public bool AllowToggleVisibility { get; set; } = true;

	public bool IsPasswordVisible { get; protected set; }

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		result = value ?? string.Empty;
		validationErrorMessage = null;
		return true;
	}

	private async Task TogglePasswordVisibility()
	{
		if (!AllowToggleVisibility)
			return;

		IsPasswordVisible = !IsPasswordVisible;
		await InvokeAsync(StateHasChanged);
	}
}
