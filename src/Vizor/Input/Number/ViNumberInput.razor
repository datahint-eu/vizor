@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@using System.Numerics;
@using System.ComponentModel;

@namespace Vizor
@typeparam TNumber
@inherits ViInputBase<TNumber>

<input type="number" class="form-control @CssClass @validationCssClass"
	   placeholder="@Placeholder" @attributes="@AdditionalAttributes"
	   disabled="@IsDisabled.ToConditionalAttribute()" readonly="@IsReadOnly.ToConditionalAttribute()"
	   aria-invalid="@isValid.ToConditionalAttributeInverse()"
	   @bind="@BindableStringValue" @bind:event="oninput"
	   onClick="this.select();" />
@RenderValidationMessages()

@code {

	private readonly TypeConverter converter = TypeDescriptor.GetConverter(typeof(TNumber));

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	protected override string FormatValueAsString(TNumber? value)
	{
		return value?.ToString() ?? string.Empty;
	}

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TNumber? result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		// special handling of empty values
		if (string.IsNullOrEmpty(value))
		{
			result = default;

			if (typeIsNullable)
				validationErrorMessage = null;
			else
				validationErrorMessage = $"Failed to parse input '{value}' as type '{typeof(TNumber).Name}'"; //TODO: better rendering of nullable type names

			return typeIsNullable;
		}

		var obj = converter.ConvertFromString(null, CultureInfo.InvariantCulture, value);
		if (obj is TNumber number)
		{
			result = number;
			validationErrorMessage = null;
			return true;
		}
		else
		{
			result = default;
			validationErrorMessage = $"Failed to parse input '{value}' as type '{typeof(TNumber).Name}'"; //TODO: better rendering of nullable type names
			return false;
		}
	}
}
