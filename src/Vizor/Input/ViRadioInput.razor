@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@inherits ViInputBase<bool>

<label class="form-check form-check-inline">
	<input class="form-check-input @CssClass @validationCssClass" type="radio" name="@Group"
		@attributes="@AdditionalAttributes"
		aria-invalid="@isValid.ToConditionalAttributeInverse()"
		@onchange="ToggleValue" checked="@Value.ToConditionalAttribute()" />
	<span class="form-check-label">
		@ChildContent
		@Text
	</span>
</label>
@RenderValidationMessages()

@code {

	//TODO: finish this component

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string? Text { get; set; }

	[CascadingParameter(Name = "ViRadioGroupName")]
	public string Group { get; set; } = default!;

	[CascadingParameter(Name = "ViRadioGroupInline")]
	public bool IsInline { get; set; }

	protected override void OnInitialized()
	{
		if (Group == null)
			throw new InvalidOperationException($"{nameof(ViRadioInput)} component can only be used inside a {nameof(ViRadioGroup)} component");
	}

	protected override string FormatValueAsString(bool value)
	{
		return value.ToTrueFalse();
	}

	private void ToggleValue()
	{
		BindableStringValue = (!Value).ToTrueFalse();
		StateHasChanged();
	}

	protected override bool TryParseValueFromString(string? value, out bool result, [NotNullWhen(false)] out string validationErrorMessage)
	{
		if (string.IsNullOrWhiteSpace(value) || !bool.TryParse(value, out var boolValue))
		{
			result = false;
			validationErrorMessage = $"Invalid input: '{value}'";
			return false;
		}
		else
		{
			result = boolValue;
			validationErrorMessage = string.Empty;
			return true;
		}
	}
}
