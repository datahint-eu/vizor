@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor
@typeparam TItem

@implements IViDataGridColumn<TItem>

@code {

	private Func<TItem, object?>? retrieveValueExpr;

	[CascadingParameter(Name = "IViDataGrid")]
	public IViDataGrid<TItem> Parent { get; set; } = default!;

	[Parameter]
	public bool IsVisible { get; set; } = true;

	[Parameter]
	public bool IsSortable { get; set; }

	[Parameter]
	public ViSortOrder SortOrder { get; set; } = ViSortOrder.Unspecified;

	[Parameter]
	public Expression<Func<TItem, object?>>? SortExpr { get; set; }

	[Parameter, EditorRequired]
	public string Name { get; set; } = default!;

	[Parameter]
	public Expression<Func<TItem, object?>>? ValueExpr { get; set; }

	[Parameter]
	public string? Format { get; set; }

	[Parameter]
	public string? CssClass { get; set; }

	[Parameter]
	public Align? TextAlign { get; set; }

	protected override void OnInitialized()
	{
		Parent.AddColumn(this);
	}

	protected override void OnParametersSet()
	{
		if (IsSortable == true && SortExpr == null) {
			SortExpr = ValueExpr;

			if (SortExpr == null)
				throw new ArgumentException($"Column '{Name}' is marked {nameof(IsSortable)}, but {nameof(SortExpr)} is not set and could not be derived from ValueExpr.");
		}

		retrieveValueExpr = ValueExpr?.Compile();
	}

	public RenderFragment? Render(TItem? item)
	{
		if (item == null || retrieveValueExpr == null)
			return Surround(null);

		var value = retrieveValueExpr.Invoke(item);
		if (value == null)
			return Surround(null);

		if (Format == null)
			return Surround(@<text>@value.ToString()</text>);

		var formatted = string.Format(Format, value);
		return Surround(@<text>@formatted</text>);
	}

	private RenderFragment Surround(RenderFragment? inner)
	{
		return @<td style="@GetStyle()" class="@CssClass">@inner</td>;
	}

	private string? GetStyle()
	{
		return TextAlign switch
		{
			Align.Left => "text-align: left",
			Align.Center => "text-align: center",
			Align.Right => "text-align: right",
			_ => null
		};
	}
}
