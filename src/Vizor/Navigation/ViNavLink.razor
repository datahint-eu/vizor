@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@using Microsoft.AspNetCore.Components.Routing;

@inherits ViComponentBase
@implements IDisposable

@inject NavigationManager NavigationManager

<li class="nav-item">
	<a class="nav-link @(IsActive ? "active" : "") @CssClass" aria-current="@AriaCurrent" @attributes="AdditionalAttributes"
	   href="@Link" disabled="@IsDisabled.ToConditionalAttribute()">
		@if (Icon != null)
		{
			<span class="nav-link-icon d-md-none d-lg-inline-block">
				@Icon
			</span>
		}
		@ChildContent
		@Text
	</a>
</li>


@code {

	//TODO: onclick support

	private string? absoluteLink;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string? Text { get; set; }

	[Parameter, EditorRequired]
	public string Link { get; set; } = default!;

	[Parameter]
	public RenderFragment? Icon { get; set; }

	[Parameter]
	public bool IsActive { get; set; }

	[Parameter]
	public bool IsDisabled { get; set; }

	private string? AriaCurrent => IsActive ? "page" : null;

	protected override void OnParametersSet()
	{
		absoluteLink = Link == null ? null : NavigationManager.ToAbsoluteUri(Link).AbsoluteUri;
		IsActive = NavigationManager.IsMatch(absoluteLink);
	}

	protected override void OnInitialized()
	{
		NavigationManager.LocationChanged += HandleLocationChanged;
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= HandleLocationChanged;
	}

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		var active = NavigationManager.IsMatch(absoluteLink);
		if (IsActive != active)
		{
			IsActive = active;
			StateHasChanged();
		}
	}
}
