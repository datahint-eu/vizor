@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@namespace Vizor
@inherits ViComponentBase

<div class="@CssClass" @attributes="@AdditionalAttributes">
	<svg preserveAspectRatio="none" height="@Height" viewBox="0 0 @Width @Height" class="w-100">
		@for (int i = 0; i < ItemCount; ++i)
		{
			<rect height="@Height" width="@ItemWidth" x="@(i * (ItemWidth + ItemSpacing))" y="0" fill="@GetFillColor(i)" />
		}
	</svg>
	@if (ShowLegend)
	{
		<div class="w-100 d-inline-flex">
			<div class="text-muted">@LabelLeft</div>
			<div class="text-muted ms-auto">@LabelCenter</div>
			<div class="text-muted ms-auto">@LabelRight</div>
		</div>
	}
</div>

@code {

	[Parameter]
	public int Height { get; set; } = 40;

	[Parameter]
	public int ItemCount { get; set; } = 90;

	[Parameter]
	public int ItemWidth { get; set; } = 3;

	[Parameter]
	public int ItemSpacing { get; set; } = 2;

	[Parameter, EditorRequired]
	public IReadOnlyList<UptimeType> Items { get; set; } = default!;

	[Parameter]
	public bool ShowLegend { get; set; } = true;

	[Parameter]
	public string? LabelLeft { get; set; }

	[Parameter]
	public string? LabelCenter { get; set; }

	[Parameter]
	public string? LabelRight { get; set; }

	public int Width => (ItemCount * (ItemWidth + ItemSpacing)) - ItemSpacing;

	protected override void OnParametersSet()
	{
		if (ShowLegend)
		{
			if (LabelLeft == null)
			{
				LabelLeft = $"{ItemCount} days ago";
			}
			if (LabelRight == null)
			{
				LabelRight = "Today";
			}
			if (LabelCenter == null)
			{
				int okCount = Items.Count(i => i == UptimeType.Ok);
				int totalCount = Items.Count(i => i != UptimeType.None);

				double pct = totalCount == 0 ? 0.0 : (double)okCount / totalCount;

				LabelCenter = $"{pct:P2} uptime";
			}
		}
	}

	private string GetFillColor(int index)
	{
		UptimeType status = UptimeType.None;
		if (Items.Count >= ItemCount)
		{
			status = Items[index];
		}
		else
		{
			// index is in the range 0..89, while Items might only be 0..15 --> the value 87 would be mapped to 13
			var actualIndex = index - (ItemCount - Items.Count);
			if (actualIndex >= 0)
				status = Items[actualIndex];
		}

		return status switch
		{
			UptimeType.Ok => RgbColors.Green.ToHex(),
			UptimeType.Error => RgbColors.Red.ToHex(),
			UptimeType.Degraded => RgbColors.Orange.ToHex(),
			_ => RgbColors.Light.ToHex(),
		};
	}
}
