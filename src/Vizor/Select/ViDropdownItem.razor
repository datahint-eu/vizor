@*
//   Copyright 2022 DataHint BV
//   Copyright 2022 Ben Motmans
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*@

@using Microsoft.AspNetCore.Components.Routing;

@inherits ViComponentBase
@implements IDisposable

@inject NavigationManager NavigationManager

<li class="@CssClass" disabled="@IsDisabled.ToConditionalAttribute()">
	<a class="dropdown-item @(IsActive ? "active" : "")" href="@Link" @onclick="HandleClick">
		@ChildContent
		@Text
	</a>
</li>


@code {

	//TODO: CssClass, attributes, custom hX

	private string? absoluteLink;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string? Text { get; set; }

	[Parameter]
	public string? Link { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> OnClick { get; set; }

	[Parameter]
	public bool IsDisabled { get; set; }

	[Parameter]
	public bool IsActive { get; set; }

	protected override void OnParametersSet()
	{
		absoluteLink = Link == null ? null : NavigationManager.ToAbsoluteUri(Link).AbsoluteUri;
		IsActive = NavigationManager.IsMatch(absoluteLink);
	}

	protected override void OnInitialized()
	{
		NavigationManager.LocationChanged += HandleLocationChanged;
	}

	private async Task HandleClick(MouseEventArgs e)
	{
		if (OnClick.HasDelegate)
		{
			await OnClick.InvokeAsync(e);
		}
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= HandleLocationChanged;
	}

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		var active = NavigationManager.IsMatch(absoluteLink);
		if (IsActive != active)
		{
			IsActive = active;
			StateHasChanged();
		}
	}
}
